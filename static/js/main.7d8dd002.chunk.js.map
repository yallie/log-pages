{"version":3,"sources":["serviceWorkerRegistration.ts","contexts/RootStoreContext.ts","stores/CallStatusStore.ts","stores/routes.ts","stores/RootStore.ts","components/EventButton.tsx","components/ColoredButton.tsx","components/EntryForm.tsx","components/PageLayout/PageLayout.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","stores/viewMap.tsx","App.tsx","initApp.ts","reportWebVitals.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","RootStoreContext","createContext","undefined","useRootStore","rootStore","useContext","Error","CallStatusStore","makeAutoObservable","this","routes","name","pattern","notFound","createRouterState","RootStore","callStatusStore","routerStore","RouterStore","EventButton","props","colors","Button","backColor","hoverColor","withStyles","theme","root","color","palette","getContrastText","backgroundColor","ColoredButton","variant","style","margin","onClick","text","EntryForm","useState","Date","selectedDate","setSelectedDate","handleDateChange","date","utils","DateFnsUtils","Grid","container","justify","label","fullWidth","format","value","marginRight","onChange","className","blue","goTo","teal","cyan","green","amber","orange","pink","red","purple","yellow","brown","lightGreen","lightBlue","grey","PageLayout","title","narrow","children","content","HomePage","NotFoundPage","Link","component","href","e","preventDefault","viewMap","home","configure","enforceActions","HistoryAdapter","browserHistory","observeRouterStateChanges","initApp","App","fallback","Provider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0JAYMA,G,OAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DA0CnC,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,+GAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAACC,GACJL,QAAQK,MAAM,4CAA6CA,M,6CChG1DC,EAAmBC,6BAAqCC,GAE9D,SAASC,IACZ,IAAMC,EAAYC,qBAAWL,GAC7B,QAAkBE,IAAdE,EACA,MAAM,IAAIE,MAAM,qEAGpB,OAAOF,E,oBCREG,EAGT,WAAaH,GAAuB,yBAFpCA,eAEmC,EAC/BI,YAAmBC,MACnBA,KAAKL,UAAYA,GCRZM,EAAS,CAClB,CACIC,KAAM,OACNC,QAAS,KAEb,CACID,KAAM,WACNC,QAAS,SCHXC,EAAWC,YAAkB,YAEtBC,EAAb,sCACIC,gBAAkB,IAAIT,EAAgBE,MAD1C,KAEIQ,YAAc,IAAIC,IAAYR,EAAQG,EAAU,CAC5CT,UAAWK,Q,uLCAnB,SAASU,EAAYC,GAAgB,IAAD,EACAA,EAAMC,QAAU,GADhB,mBAE1BC,ECRmB,SAACC,EAAoBC,GAC9C,YAAkBtB,IAAdqB,QACmBrB,IAAfsB,IACAA,EAAaD,GAIbE,aAAW,SAACC,GAAD,MAAmB,CAC1BC,KAAM,CACFC,MAAOF,EAAMG,QAAQC,gBAAgBP,GACrCQ,gBAAiBR,EACjB,UAAW,CACPQ,gBAAiBP,OAL7BC,CAQIH,MAILA,IDXQU,CAFiB,WAGhC,OACI,cAACV,EAAD,CACIW,QAAQ,YACRC,MAAO,CAAEC,OAAQ,SACjBC,QAAShB,EAAMgB,QAHnB,SAKKhB,EAAMiB,O,aEWnB,SAASC,IAAa,IACVrB,EAAgBd,IAAhBc,YADS,EAEuBsB,mBACpC,IAAIC,MAHS,mBAEVC,EAFU,KAEIC,EAFJ,KAMXC,EAAmB,SAACC,GACtBF,EAAgBE,IAKpB,OACI,cAAC,IAAD,CAAyBC,MAAOC,IAAhC,SACI,eAAC,IAAD,WACI,cAACC,EAAA,EAAD,CAAMC,WAAW,EAAMC,QAAQ,eAA/B,SACI,gCACI,cAAC,IAAD,CACIC,MAAM,2BACNC,WAAW,EACXlB,QAAQ,SACRE,OAAO,SACPiB,OAAO,aACPC,MAAOZ,EACPP,MAAO,CAAEoB,YAAa,OACtBC,SAAUZ,IAEd,cAAC,IAAD,CACIO,MAAM,iCACNC,WAAW,EACXlB,QAAQ,SACRmB,OAAO,WACPI,UAAU,8BACVH,MAAOZ,EACPc,SAAUZ,SAItB,eAACI,EAAA,EAAD,CAAMC,WAAW,EAAMC,QAAQ,eAA/B,UACI,cAAC9B,EAAD,CAAakB,KAAK,uCAAShB,OAAQ,CAAEoC,IAAK,KAAMA,IAAK,MAAQrB,QA7B5D,kBAAMnB,EAAYyC,KAAK,eA8BxB,cAACvC,EAAD,CAAakB,KAAK,uCAAShB,OAAQ,CAAEsC,IAAK,KAAMA,IAAK,QACrD,cAACxC,EAAD,CAAakB,KAAK,qBAAMhB,OAAQ,CAAEuC,IAAK,KAAMA,IAAK,QAClD,cAACzC,EAAD,CAAakB,KAAK,uCAAShB,OAAQ,CAAEwC,IAAM,KAAMA,IAAM,QACvD,cAAC1C,EAAD,CAAakB,KAAK,uCAAShB,OAAQ,CAAEyC,IAAM,KAAMA,IAAM,QACvD,cAAC3C,EAAD,CAAakB,KAAK,qEAAchB,OAAQ,CAAE0C,IAAO,KAAMA,IAAO,QAC9D,cAAC5C,EAAD,CAAakB,KAAK,+DAAahB,OAAQ,CAAE2C,IAAK,KAAMA,IAAK,QACzD,cAAC7C,EAAD,CAAakB,KAAK,qBAAMhB,OAAQ,CAAE4C,IAAI,KAAMA,IAAI,QAChD,cAAC9C,EAAD,CAAakB,KAAK,iCAAQhB,OAAQ,CAAEsC,IAAK,KAAMA,IAAK,QACpD,cAACxC,EAAD,CAAakB,KAAK,uCAAShB,OAAQ,CAAE6C,IAAO,KAAMA,IAAO,QACzD,cAAC/C,EAAD,CAAakB,KAAK,yDAAYhB,OAAQ,CAAE6C,IAAO,KAAMA,IAAO,QAC5D,cAAC/C,EAAD,CAAakB,KAAK,qEAAchB,OAAQ,CAAE8C,IAAO,KAAMA,IAAO,QAC9D,cAAChD,EAAD,CAAakB,KAAK,6CAAUhB,OAAQ,CAAE+C,IAAM,KAAMA,IAAM,QACxD,cAACjD,EAAD,CAAakB,KAAK,6CAAUhB,OAAQ,CAAE4C,IAAI,KAAMA,IAAI,QACpD,cAAC9C,EAAD,CAAakB,KAAK,iCAAQhB,OAAQ,CAAEgD,IAAW,KAAMA,IAAW,QAChE,cAAClD,EAAD,CAAakB,KAAK,iCAAQhB,OAAQ,CAAEiD,IAAU,KAAMA,IAAU,QAC9D,cAACnD,EAAD,CAAakB,KAAK,mDAAWhB,OAAQ,CAAEkD,IAAK,KAAMA,IAAK,QACvD,cAACpD,EAAD,CAAakB,KAAK,qBAAMhB,OAAQ,CAAEiD,IAAU,KAAMA,IAAU,gBC5EzE,SAASE,EAAWpD,GAAgB,IAC/BqD,EAA4BrD,EAA5BqD,MAAOC,EAAqBtD,EAArBsD,OAAQC,EAAavD,EAAbuD,SACnBC,EAAUD,EASd,YARezE,IAAXwE,GAAwBA,KACxBE,EACI,cAAC,IAAD,UACKD,KAMT,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,UACKF,MAIT,cAAC,IAAD,UACKG,OC1BV,SAASC,IACZ,OACI,cAACL,EAAD,CAAYC,MAAM,8FAAlB,SACI,cAACnC,EAAD,M,aCDL,SAASwC,IAAgB,IACpB7D,EAAgBd,IAAhBc,YAMR,OACI,cAACuD,EAAD,CAAYC,MAAM,qGAAlB,SACI,qBAAKvC,MAAO,CAAEC,OAAQ,OAAtB,SACI,cAAC4C,EAAA,EAAD,CACIC,UAAU,IACVC,KAAK,IACL7C,QAXD,SAAC8C,GACZA,EAAEC,iBACFlE,EAAYyC,KAAK,SAMT,yGCXT,IAAM0B,EAAU,CACnBC,KAAM,cAACR,EAAD,IACNhE,SAAU,cAACiE,EAAD,KCER1E,ECEC,WALHkF,YAAU,CACNC,eAAgB,aAOpB,IAAMnF,EAAY,IAAIW,EACdE,EAAgBb,EAAhBa,YAMR,OAHuB,IAAIuE,IAAevE,EAAawE,KACxCC,4BAERtF,EDZOuF,GAiBHC,MAff,WACI,OACI,cAAC,IAAD,UACI,cAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,SACI,cAAC7F,EAAiB8F,SAAlB,CAA2BzC,MAAOjD,EAAlC,SACI,eAAC,IAAc0F,SAAf,CAAwBzC,MAAOjD,EAAUa,YAAzC,UACI,cAAC8E,EAAA,EAAD,IACA,cAAC,IAAD,CAAYX,QAASA,c,QEH9BY,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBhH,MAAK,YAAkD,IAA/CiH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCFpBO,EAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SfcrB,SAAkB9H,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAI8H,IAAIC,GAAwBtI,OAAOC,SAASwG,MACpD8B,SAAWvI,OAAOC,SAASsI,OAIrC,OAGJvI,OAAOwI,iBAAiB,QAAQ,WAC5B,IAAMnI,EAAK,UAAMiI,GAAN,sBAEPxI,IAgEhB,SAAiCO,EAAeC,GAE5CmI,MAAMpI,EAAO,CACTqI,QAAS,CAAE,iBAAkB,YAE5BhI,MAAK,SAACiI,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxI,UAAUC,cAAcwI,MAAMtI,MAAK,SAACC,GAChCA,EAAasI,aAAavI,MAAK,WAC3BV,OAAOC,SAASiJ,eAKxB9I,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IAAI,oEAtFRgI,CAAwB9I,EAAOC,GAI/BC,UAAUC,cAAcwI,MAAMtI,MAAK,WAC/BQ,QAAQC,IACJ,+GAMRf,EAAgBC,EAAOC,OepCvC8I,GAKA5B,M","file":"static/js/main.7d8dd002.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://cra.link/PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://cra.link/PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import { createContext, useContext } from \"react\"\nimport { RootStore } from \"../stores/RootStore\"\n\nexport const RootStoreContext = createContext<RootStore | undefined>(undefined)\n\nexport function useRootStore() {\n    const rootStore = useContext(RootStoreContext)\n    if (rootStore === undefined) {\n        throw new Error(\"useRootStore hook must be used within a RootStoreContext.Provider\")\n    }\n\n    return rootStore\n}","import { RootStore } from \"./RootStore\"\nimport { makeAutoObservable } from \"mobx\"\n\nexport class CallStatusStore {\n    rootStore: RootStore\n\n    constructor (rootStore: RootStore) {\n        makeAutoObservable(this)\n        this.rootStore = rootStore\n    }\n}","export const routes = [\n    {\n        name: \"home\",\n        pattern: \"/\",\n    },\n    {\n        name: \"notFound\",\n        pattern: \"/404\",\n    }\n]\n","import { RouterStore, createRouterState } from \"mobx-state-router\"\nimport { CallStatusStore } from \"./CallStatusStore\"\nimport { routes } from \"./routes\"\n\nconst notFound = createRouterState(\"notFound\")\n\nexport class RootStore {\n    callStatusStore = new CallStatusStore(this)\n    routerStore = new RouterStore(routes, notFound, {\n        rootStore: this\n    })\n}","import { ColoredButton } from \"./ColoredButton\"\nimport React from \"react\"\n\ninterface IProps {\n    text: string\n    colors?: [string, string]\n    onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined\n}\n\nfunction EventButton(props: IProps) {\n    const [backColor, hoverColor] = props.colors || []\n    const Button = ColoredButton(backColor, hoverColor)\n    return (\n        <Button\n            variant=\"contained\"\n            style={{ margin: \"0.4em\" }}\n            onClick={props.onClick}\n        >\n            {props.text}\n        </Button>\n    )\n}\n\nexport { EventButton }\n","import { Theme, withStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\n\nexport const ColoredButton = (backColor?: string, hoverColor?: string) => {\n    if (backColor !== undefined) {\n        if (hoverColor === undefined) {\n            hoverColor = backColor\n        }\n\n        return (\n            withStyles((theme: Theme) => ({\n                root: {\n                    color: theme.palette.getContrastText(backColor),\n                    backgroundColor: backColor,\n                    \"&:hover\": {\n                        backgroundColor: hoverColor,\n                    },\n                },\n            }))(Button)\n        )\n    }\n\n    return Button\n}","import \"date-fns\"\nimport {\n    KeyboardDatePicker,\n    KeyboardTimePicker,\n    MuiPickersUtilsProvider\n} from \"@material-ui/pickers\"\nimport React, { useState } from \"react\"\nimport {\n    amber,\n    blue,\n    brown,\n    cyan,\n    green,\n    grey,\n    lightBlue,\n    lightGreen,\n    orange,\n    pink,\n    purple,\n    red,\n    teal,\n    yellow,\n} from \"@material-ui/core/colors\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport { EventButton } from \"./EventButton\"\nimport Grid from \"@material-ui/core/Grid\"\nimport { NarrowContainer } from \"@react-force/core\"\nimport { useRootStore } from \"../contexts\"\n\nfunction EntryForm() {\n    const { routerStore } = useRootStore()\n    const [selectedDate, setSelectedDate] = useState<Date | null>(\n        new Date()\n    )\n\n    const handleDateChange = (date: Date | null) => {\n        setSelectedDate(date)\n    }\n\n    const hanle404 = () => routerStore.goTo(\"notFound\")\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <NarrowContainer>\n                <Grid container={true} justify=\"space-around\">\n                    <div>\n                        <KeyboardDatePicker\n                            label=\"Дата\"\n                            fullWidth={true}\n                            variant=\"dialog\"\n                            margin=\"normal\"\n                            format=\"yyyy-MM-dd\"\n                            value={selectedDate}\n                            style={{ marginRight: \"1em\" }}\n                            onChange={handleDateChange}>\n                        </KeyboardDatePicker>\n                        <KeyboardTimePicker\n                            label=\"Время\"\n                            fullWidth={true}\n                            variant=\"dialog\"\n                            format=\"HH:mm:ss\"\n                            className=\"MuiFormControl-marginNormal\"\n                            value={selectedDate}\n                            onChange={handleDateChange}>\n                        </KeyboardTimePicker>\n                    </div>\n                </Grid>\n                <Grid container={true} justify=\"space-around\">\n                    <EventButton text=\"Подъем\" colors={[ blue[300], blue[500] ]} onClick={hanle404} />\n                    <EventButton text=\"Туалет\" colors={[ teal[300], teal[700] ]} />\n                    <EventButton text=\"Еда\" colors={[ cyan[200], cyan[500] ]} />\n                    <EventButton text=\"Работа\" colors={[ green[300], green[500] ]} />\n                    <EventButton text=\"Чтение\" colors={[ amber[400], amber[700] ]} />\n                    <EventButton text=\"Развлечение\" colors={[ orange[400], orange[700] ]} />\n                    <EventButton text=\"Гимнастика\" colors={[ pink[200], pink[500] ]} />\n                    <EventButton text=\"Вес\" colors={[ red[200], red[500] ]} />\n                    <EventButton text=\"Отдых\" colors={[ teal[200], teal[500] ]} />\n                    <EventButton text=\"Помощь\" colors={[ purple[200], purple[500] ]} />\n                    <EventButton text=\"Хозяйство\" colors={[ purple[300], purple[600] ]} />\n                    <EventButton text=\"Недомогание\" colors={[ yellow[400], yellow[600] ]} />\n                    <EventButton text=\"Мигрень\" colors={[ brown[400], brown[600] ]} />\n                    <EventButton text=\"Лечение\" colors={[ red[300], red[600] ]}  />\n                    <EventButton text=\"Учеба\" colors={[ lightGreen[300], lightGreen[600] ]} />\n                    <EventButton text=\"Хобби\" colors={[ lightBlue[300], lightBlue[600] ]} />\n                    <EventButton text=\"Прогулка\" colors={[ grey[600], grey[800] ]} />\n                    <EventButton text=\"Сон\" colors={[ lightBlue[200], lightBlue[500] ]} />\n                </Grid>\n            </NarrowContainer>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport {\n    EntryForm\n}","import { Header, HeaderTitle, NarrowContainer, ScrollingContainer, ViewVerticalContainer } from \"@react-force/core\"\nimport React, { ReactNode } from \"react\"\n\ninterface IProps {\n    title: ReactNode\n    narrow?: boolean\n    children: ReactNode | ReactNode[]\n}\n\nexport function PageLayout(props: IProps) {\n    const { title, narrow, children } = props\n    let content = children\n    if (narrow === undefined || narrow) {\n        content = (\n            <NarrowContainer>\n                {children}\n            </NarrowContainer>\n        )\n    }\n\n    return (\n        <ViewVerticalContainer>\n            <Header>\n                <HeaderTitle>\n                    {title}\n                </HeaderTitle>\n            </Header>\n\n            <ScrollingContainer>\n                {content}\n            </ScrollingContainer>\n        </ViewVerticalContainer>\n    )\n}\n","import { EntryForm } from \"../components/EntryForm\"\nimport { PageLayout } from \"../components/PageLayout/PageLayout\"\n\nexport function HomePage() {\n    return (\n        <PageLayout title=\"Добавить событие\">\n            <EntryForm />\n        </PageLayout>\n    )\n}\n","import { Link } from \"@material-ui/core\"\nimport { PageLayout } from \"../components/PageLayout\"\nimport React from \"react\"\nimport { useRootStore } from \"../contexts\"\n\nexport function NotFoundPage() {\n    const { routerStore } = useRootStore()\n    const goHome = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault()\n        routerStore.goTo(\"home\")\n    }\n\n    return (\n        <PageLayout title=\"Нет такой страницы\">\n            <div style={{ margin: \"1em\" }}>\n                <Link\n                    component=\"a\"\n                    href=\"/\"\n                    onClick={goHome}\n                >\n                    Перейти в начало!\n                </Link>\n            </div>\n        </PageLayout>\n    )\n}","import { HomePage } from \"../pages/HomePage\"\nimport { NotFoundPage } from \"../pages/NotFoundPage\"\nimport React from \"react\"\n\nexport const viewMap = {\n    home: <HomePage />,\n    notFound: <NotFoundPage />,\n}\n","import { ErrorBoundary, Loading } from \"@react-force/core\"\nimport React, { Suspense } from \"react\"\nimport { RouterContext, RouterView } from \"mobx-state-router\"\nimport { CssBaseline } from \"@material-ui/core\"\nimport { RootStoreContext } from \"./contexts\"\nimport { initApp } from \"./initApp\"\nimport { viewMap } from \"./stores/viewMap\"\n\nconst rootStore = initApp()\n\nfunction App() {\n    return (\n        <ErrorBoundary>\n            <Suspense fallback={<Loading />}>\n                <RootStoreContext.Provider value={rootStore}>\n                    <RouterContext.Provider value={rootStore.routerStore}>\n                        <CssBaseline />\n                        <RouterView viewMap={viewMap} />\n                    </RouterContext.Provider>\n                </RootStoreContext.Provider>\n            </Suspense>\n        </ErrorBoundary>\n    )\n}\n\nexport default App\n","import { HistoryAdapter, browserHistory } from \"mobx-state-router\"\nimport { RootStore } from \"./stores/RootStore\"\nimport { configure } from \"mobx\"\n\nfunction initMobX() {\n    configure({\n        enforceActions: \"observed\",\n    })\n}\n\nexport function initApp() {\n    initMobX()\n\n    const rootStore = new RootStore()\n    const { routerStore } = rootStore\n\n    // sync router store with browser history\n    const historyAdapter = new HistoryAdapter(routerStore, browserHistory)\n    historyAdapter.observeRouterStateChanges()\n\n    return rootStore\n}","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import \"./index.css\"\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\"\nimport App from \"./App\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}